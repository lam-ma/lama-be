openapi: "3.0.0"
info:
  version: 1.0.0
  title: Lama Backend
  license:
    name: MIT
servers:
  - url: https://lama-api.kvarto.net

paths: {}

components:
  schemas:
    LoginMessage:
      type: object
      required:
        - type
        - id
      properties:
        type:
          type: string
          description: "login" constant
        id:
          type: string
    Quizz:
      type: object
      required:
        - id
        - title
        - questions
      properties:
        id:
          type: string
        title:
          type: string
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
    Question:
      type: object
      required:
        - id
        - title
        - questions
      properties:
        id:
          type: string
        description:
          type: string
        image_url:
          type: string
        answers:
          type: array
          items:
            $ref: "#/components/schemas/Answer"

    Answer:
      type: object
      required:
        - id
        - title
        - questions
      properties:
        id:
          type: string
        description:
          type: string
        is_right:
          type: boolean

    Game:
      type: object
      required:
        - id
        - quizz
        - state
      properties:
        id:
          type: string
        current_question_id:
          type: string
        quizz:
          $ref: "#/components/schemas/Quizz"
        state:
          $ref: "#/components/schemas/GameState"

    HighScore:
      type: object
      required:
        - scores
      properties:
        scores:
          type: array
          items:
            type: object
            required:
              - name
              - score
            properties:
              name:
                type: string
              score:
                type: integer

    ChangeGameRequest:
      type: object
      required:
        - question_id
        - state
      properties:
        question_id:
          type: string
        state:
          $ref: "#/components/schemas/GameState"

    GameState:
      type: string
      enum:
        - START
        - QUESTION
        - ANSWER
        - FINISH

    Problem:
      type: object
      properties:
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
      required:
        - title
        - status
